openapi: 3.0.3
info:
  title: Flat Service
  description: |-
    SOA lab #1 Kupershtein P34101
  version: 1.0.0

tags:
  - name: Flat

paths:
  /flat:
    get:
      tags:
        - Flat
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      summary: Get all flats
      operationId: getAllFlats
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfFlats'
        default:
          $ref: '#/components/responses/defaultError'
    post:
      tags:
        - Flat
      summary: Add new flat
      operationId: addNewFlat
      requestBody:
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/Flat'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flat'
        default:
          $ref: '#/components/responses/defaultError'
    put:
      tags:
        - Flat
      summary: Update flat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flat'
      responses:
        '200':
          description: flat successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flat'
        default:
          $ref: '#/components/responses/defaultError'
    delete:
      tags:
        - Flat
      summary: Delete flats by filter query
      parameters:
        - $ref: '#/components/parameters/filterRequired'
      responses:
        '200':
          description: flats deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfFlats'
        default:
          $ref: '#/components/responses/defaultError'

  /flat/{flatId}:
    get:
      tags:
        - Flat
      summary: Get flat by id
      parameters:
        - $ref: '#/components/parameters/flatId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flat'
        default:
          $ref: '#/components/responses/defaultError'
    delete:
      tags:
        - Flat
      summary: Delete flat
      parameters:
        - $ref: '#/components/parameters/flatId'
      responses:
        '200':
          description: flat successfully deleted
        default:
          $ref: '#/components/responses/defaultError'

  /flat/min-area:
    get:
      tags:
        - Flat
      summary: Get flat with smallest area
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flat'
        default:
          $ref: '#/components/responses/defaultError'

components:
  parameters:
      flat:
        name: flat
        in: query
        style: deepObject
        schema:
          $ref: '#/components/schemas/Flat'
        required: true

      flatId:
        name: flatId
        in: path
        schema:
          type: integer
          format: int64
        required: true

      page:
        name: page
        in: query
        schema:
          type: integer
          format: int64
      pageSize:
        name: pageSize
        in: query
        schema:
          type: integer
          format: int64

      filter:
        name: filter
        in: query
        style: deepObject
        description: |-
          Conditions are combined through **AND**
          
          **Example**: filter[id]=&lt;eq&gt;3&filter[id]=&lt;gt&gt;100&filter[name]=&lt;substr&gt;test
        schema:
          $ref: '#/components/schemas/FlatFilters'

      filterRequired:
        name: filter
        in: query
        style: deepObject
        required: true
        description: |-
          Conditions are combined through *AND*

          **Example**: filter[id]=&lt;eq&gt;3&filter[id]=&lt;gt&gt;100&filter[name]=&lt;substr&gt;test
        schema:
          $ref: '#/components/schemas/FlatFilters'

      sort:
        name: sort
        in: query
        style: deepObject
        description: |-
          **Example**: sort[id]=desc&sort[name]=asc
        schema:
          $ref: '#/components/schemas/FlatSorts'

      sortRequired:
        name: sort
        in: query
        style: deepObject
        required: true
        description: |-
          **Example**: sort[id]=desc&sort[name]=asc
        schema:
          $ref: '#/components/schemas/FlatSorts'

  schemas:
    Flat:
      required:
        - name
        - coordinates
        - area
        - numberOfRooms
        - furnish
        - view
        - transport
        - price
        - hasBalcony
        - timeToSubwayOnTransport
        - timeToSubwayOnFoot
      type: object
      properties:
        id:
          description: Unique. Generated automatically
          type: integer
          format: int64
          minimum: 1
        name:
          type: string
          minLength: 1
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          description: Generated automatically
        area:
          type: integer
          format: int32
          minimum: 0
        numberOfRooms:
          type: integer
          format: int32
          minimum: 0
        furnish:
          $ref: '#/components/schemas/Furnish'
        view:
          $ref: '#/components/schemas/View'
        transport:
          $ref: '#/components/schemas/Transport'
        house:
          $ref: '#/components/schemas/House'
        price:
          type: integer
          format: int64
        hasBalcony:
          type: boolean
        timeToSubwayOnTransport:
          type: integer
          format: int64
          minimum: 1
        timeToSubwayOnFoot:
          type: integer
          format: int64
          minimum: 1
    ArrayOfFlats:
      type: array
      items:
        $ref: '#/components/schemas/Flat'
    Coordinates:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
          format: float
        y:
          type: integer
          format: int32

    House:
      type: object
      nullable: true
      properties:
        name:
          type: string
          nullable: true
        year:
          type: integer
          format: int32
          minimum: 1
          maximum: 808
        numberOfLifts:
          type: integer
          format: int64
          minimum: 1
    Furnish:
      type: string
      enum:
        - DESIGNER
        - FINE
        - BAD
        - LITTLE
    View:
      type: string
      enum:
        - STREET
        - YARD
        - PARK
        - BAD
        - GOOD
    Transport:
      type: string
      enum:
        - FEW
        - NONE
        - ENOUGH

    Error:
      type: object
      properties:
        messages:
          type: array
          items:
            type: string
            minLength: 1
    FlatFilters:
        type: object
        properties:
          id:
            $ref: '#/components/schemas/FilterPositiveIntegerQuery'
          name:
            $ref: '#/components/schemas/FilterStringQuery'
          coordinateX:
            $ref: '#/components/schemas/FilterFloatQuery'
          coordinateY:
            $ref: '#/components/schemas/FilterIntegerQuery'
          creationDate:
            $ref: '#/components/schemas/FilterDateQuery'
          area:
            $ref: '#/components/schemas/FilterPositiveIntegerQuery'
          numberOfRooms:
            $ref: '#/components/schemas/FilterPositiveIntegerQuery'
          furnish:
            $ref: '#/components/schemas/FilterFurnishQuery'
          view:
            $ref: '#/components/schemas/FilterViewQuery'
          transport:
            $ref: '#/components/schemas/FilterTransportQuery'
          houseName:
            $ref: '#/components/schemas/FilterStringQuery'
          houseYear:
            $ref: '#/components/schemas/FilterPositiveIntegerQuery'
          houseNumberOfLifts:
            $ref: '#/components/schemas/FilterPositiveIntegerQuery'
          price:
            $ref: '#/components/schemas/FilterIntegerQuery'
          hasBalcony:
            $ref: '#/components/schemas/FilterBooleanQuery'
          timeToSubwayOnTransport:
            $ref: '#/components/schemas/FilterIntegerQuery'
          timeToSubwayOnFoot:
            $ref: '#/components/schemas/FilterIntegerQuery'
    FlatSorts:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SortQuery'
        name:
          $ref: '#/components/schemas/SortQuery'
        coordinateX:
          $ref: '#/components/schemas/SortQuery'
        coordinateY:
          $ref: '#/components/schemas/SortQuery'
        creationDate:
          $ref: '#/components/schemas/SortQuery'
        area:
          $ref: '#/components/schemas/SortQuery'
        numberOfRooms:
          $ref: '#/components/schemas/SortQuery'
        furnish:
          $ref: '#/components/schemas/SortQuery'
        view:
          $ref: '#/components/schemas/SortQuery'
        transport:
          $ref: '#/components/schemas/SortQuery'
        houseName:
          $ref: '#/components/schemas/SortQuery'
        houseYear:
          $ref: '#/components/schemas/SortQuery'
        houseNumberOfLifts:
          $ref: '#/components/schemas/SortQuery'
        price:
          $ref: '#/components/schemas/SortQuery'
        hasBalcony:
          $ref: '#/components/schemas/SortQuery'
        timeToSubwayOnTransport:
          $ref: '#/components/schemas/SortQuery'
        timeToSubwayOnFoot:
          $ref: '#/components/schemas/SortQuery'

    FilterIntegerQuery:
      type: string
      pattern: '\[(eq|neq|gt|lt)\](-?\d{1,19})'
    FilterPositiveIntegerQuery:
      type: string
      pattern: '\[(eq|neq|gt|lt)\](\d{1,19})'
    FilterFloatQuery:
      type: string
      pattern: '\[(eq|neq|gt|lt)\](-?([0-9]*[.])?[0-9]+)'
    FilterBooleanQuery:
      type: string
      pattern: '\[(eq|neq)\](true|false)'
    FilterStringQuery:
      type: string
      pattern: '\[(substr)\](.+)'
    FilterDateQuery:
      type: string
      pattern: '\[(eq|neq|gt|lt)\]((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)'
    FilterFurnishQuery:
      type: string
      pattern: '\[(eq|neq)\](DESIGNER|FINE|BAD|LITTLE)'
    FilterViewQuery:
      type: string
      pattern: '\[(eq|neq)\](STREET|YARD|PARK|BAD|GOOD)'
    FilterTransportQuery:
      type: string
      pattern: '\[(eq|neq)\](FEW|NONE|ENOUGH)'

    SortQuery:
      type: string
      pattern: '(desc|asc)'

  responses:
    defaultError:
      description: Operation failed due to an error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
